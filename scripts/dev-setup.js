#!/usr/bin/env node

/**
 * Enhanced Development Environment Setup
 * Optimizes development experience with performance monitoring
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class DevSetup {
  constructor() {
    this.startTime = Date.now();
    this.setupSteps = [];
  }

  async runSetup() {
    console.log('üöÄ Setting up BBWA development environment...\n');
    
    try {
      await this.validateSystem();
      await this.setupCache();
      await this.installDependencies();
      await this.validateEnvironment();
      await this.setupDevelopmentTools();
      await this.runHealthCheck();
      await this.displaySummary();
    } catch (error) {
      console.error('‚ùå Setup failed:', error.message);
      process.exit(1);
    }
  }

  async validateSystem() {
    console.log('üîç Validating system requirements...');
    
    const step = { name: 'System Validation', status: 'running', startTime: Date.now() };
    
    try {
      // Check Node.js version\n      const nodeVersion = process.version;\n      const requiredNodeVersion = '18.0.0';\n      \n      if (this.compareVersions(nodeVersion.slice(1), requiredNodeVersion) < 0) {\n        throw new Error(`Node.js ${requiredNodeVersion} or higher required. Current: ${nodeVersion}`);\n      }\n      \n      // Check npm version\n      const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();\n      const requiredNpmVersion = '9.0.0';\n      \n      if (this.compareVersions(npmVersion, requiredNpmVersion) < 0) {\n        console.warn(`‚ö†Ô∏è  npm ${requiredNpmVersion} or higher recommended. Current: ${npmVersion}`);\n      }\n      \n      step.status = 'completed';\n      step.duration = Date.now() - step.startTime;\n      console.log(`‚úÖ System requirements validated (${step.duration}ms)`);\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error.message;\n      throw error;\n    }\n    \n    this.setupSteps.push(step);\n  }\n\n  async setupCache() {\n    console.log('üîÑ Setting up build cache...');\n    \n    const step = { name: 'Cache Setup', status: 'running', startTime: Date.now() };\n    \n    try {\n      // Create cache directories\n      const cacheDirectories = [\n        '.turbo',\n        'apps/web/.next/cache',\n        'node_modules/.cache'\n      ];\n      \n      cacheDirectories.forEach(dir => {\n        const fullPath = path.join(process.cwd(), dir);\n        if (!fs.existsSync(fullPath)) {\n          fs.mkdirSync(fullPath, { recursive: true });\n        }\n      });\n      \n      // Set cache configuration\n      const turboConfig = {\n        \"$schema\": \"https://turbo.build/schema.json\",\n        \"pipeline\": {\n          \"dev\": {\n            \"cache\": false,\n            \"persistent\": true\n          },\n          \"build\": {\n            \"cache\": true,\n            \"outputs\": [\".next/**\", \"!.next/cache/**\"]\n          }\n        }\n      };\n      \n      step.status = 'completed';\n      step.duration = Date.now() - step.startTime;\n      console.log(`‚úÖ Build cache configured (${step.duration}ms)`);\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error.message;\n      throw error;\n    }\n    \n    this.setupSteps.push(step);\n  }\n\n  async installDependencies() {\n    console.log('üì¶ Installing dependencies...');\n    \n    const step = { name: 'Dependencies', status: 'running', startTime: Date.now() };\n    \n    try {\n      // Clean install for optimal performance\n      if (fs.existsSync('node_modules')) {\n        console.log('   Cleaning existing node_modules...');\n        execSync('rm -rf node_modules', { stdio: 'inherit' });\n      }\n      \n      console.log('   Installing packages...');\n      execSync('npm ci --prefer-offline --no-audit', { stdio: 'inherit' });\n      \n      // Install Turbo globally if not present\n      try {\n        execSync('turbo --version', { stdio: 'ignore' });\n      } catch {\n        console.log('   Installing Turbo globally...');\n        execSync('npm install -g turbo', { stdio: 'inherit' });\n      }\n      \n      step.status = 'completed';\n      step.duration = Date.now() - step.startTime;\n      console.log(`‚úÖ Dependencies installed (${Math.round(step.duration / 1000)}s)`);\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error.message;\n      throw error;\n    }\n    \n    this.setupSteps.push(step);\n  }\n\n  async validateEnvironment() {\n    console.log('üåç Validating environment configuration...');\n    \n    const step = { name: 'Environment', status: 'running', startTime: Date.now() };\n    \n    try {\n      // Run environment validation script\n      execSync('node scripts/validate-env.js', { stdio: 'inherit' });\n      \n      step.status = 'completed';\n      step.duration = Date.now() - step.startTime;\n      console.log(`‚úÖ Environment validated (${step.duration}ms)`);\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error.message;\n      console.warn('‚ö†Ô∏è  Environment validation failed - continuing setup');\n      // Don't throw here, allow setup to continue\n    }\n    \n    this.setupSteps.push(step);\n  }\n\n  async setupDevelopmentTools() {\n    console.log('üõ†Ô∏è  Setting up development tools...');\n    \n    const step = { name: 'Dev Tools', status: 'running', startTime: Date.now() };\n    \n    try {\n      // Setup Git hooks (if in git repo)\n      if (fs.existsSync('.git')) {\n        const hooksDir = '.git/hooks';\n        if (!fs.existsSync(hooksDir)) {\n          fs.mkdirSync(hooksDir, { recursive: true });\n        }\n        \n        // Pre-commit hook for linting\n        const preCommitHook = `#!/bin/sh\nnpm run precommit\n`;\n        fs.writeFileSync(path.join(hooksDir, 'pre-commit'), preCommitHook);\n        \n        // Make executable (Unix systems)\n        if (process.platform !== 'win32') {\n          execSync('chmod +x .git/hooks/pre-commit');\n        }\n      }\n      \n      // Create development shortcuts\n      const devScripts = {\n        'dev-fast': 'npm run dev:fast',\n        'build-analyze': 'npm run build:analyze',\n        'health-check': 'npm run health'\n      };\n      \n      step.status = 'completed';\n      step.duration = Date.now() - step.startTime;\n      console.log(`‚úÖ Development tools configured (${step.duration}ms)`);\n      \n    } catch (error) {\n      step.status = 'failed';\n      step.error = error.message;\n      console.warn('‚ö†Ô∏è  Development tools setup failed - continuing');\n    }\n    \n    this.setupSteps.push(step);\n  }\n\n  async runHealthCheck() {\n    console.log('üè• Running system health check...');\n    \n    const step = { name: 'Health Check', status: 'running', startTime: Date.now() };\n    \n    try {\n      execSync('node scripts/health-check.js', { stdio: 'inherit' });\n      \n      step.status = 'completed';\n      step.duration = Date.now() - step.startTime;\n      console.log(`‚úÖ Health check passed (${step.duration}ms)`);\n      \n    } catch (error) {\n      step.status = 'warning';\n      step.error = error.message;\n      console.warn('‚ö†Ô∏è  Health check issues detected - review output above');\n    }\n    \n    this.setupSteps.push(step);\n  }\n\n  async displaySummary() {\n    const totalDuration = Date.now() - this.startTime;\n    \n    console.log('\\nüéâ Development Environment Setup Complete!');\n    console.log('==========================================');\n    console.log(`‚è±Ô∏è  Total setup time: ${Math.round(totalDuration / 1000)}s`);\n    \n    // Setup steps summary\n    console.log('\\nüìã Setup Steps:');\n    this.setupSteps.forEach(step => {\n      const status = step.status === 'completed' ? '‚úÖ' : \n                    step.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';\n      const duration = step.duration ? `(${step.duration}ms)` : '';\n      console.log(`   ${status} ${step.name} ${duration}`);\n      \n      if (step.error) {\n        console.log(`      Error: ${step.error}`);\n      }\n    });\n    \n    // Quick start commands\n    console.log('\\nüöÄ Quick Start Commands:');\n    console.log('   npm run dev        # Start development server');\n    console.log('   npm run dev:fast    # Fast dev with cache optimization');\n    console.log('   npm run build       # Production build');\n    console.log('   npm run test        # Run tests');\n    console.log('   npm run health      # System health check');\n    \n    // Performance tips\n    console.log('\\nüí° Performance Tips:');\n    console.log('   - Use \"npm run dev:fast\" for optimal development speed');\n    console.log('   - Run \"npm run build:analyze\" to analyze bundle sizes');\n    console.log('   - Use \"npm run clean:cache\" if experiencing build issues');\n    \n    // Save setup report\n    const report = {\n      timestamp: new Date().toISOString(),\n      totalDuration,\n      steps: this.setupSteps,\n      nodeVersion: process.version,\n      npmVersion: execSync('npm --version', { encoding: 'utf8' }).trim(),\n      platform: process.platform\n    };\n    \n    fs.writeFileSync('setup-report.json', JSON.stringify(report, null, 2));\n    console.log('\\nüìÑ Setup report saved to: setup-report.json');\n  }\n\n  compareVersions(version1, version2) {\n    const v1Parts = version1.split('.').map(Number);\n    const v2Parts = version2.split('.').map(Number);\n    \n    for (let i = 0; i < Math.max(v1Parts.length, v2Parts.length); i++) {\n      const v1Part = v1Parts[i] || 0;\n      const v2Part = v2Parts[i] || 0;\n      \n      if (v1Part < v2Part) return -1;\n      if (v1Part > v2Part) return 1;\n    }\n    \n    return 0;\n  }\n}\n\n// Run setup if called directly\nif (require.main === module) {\n  const setup = new DevSetup();\n  setup.runSetup().catch(console.error);\n}\n\nmodule.exports = DevSetup;