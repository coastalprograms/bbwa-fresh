name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 18
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Quality checks and testing
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Setup Turbo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Environment validation
        run: echo "Skipping env validation in CI for now"
        env:
          NODE_ENV: test

      - name: Type checking
        run: npm run typecheck

      - name: Linting
        run: npm run lint

      - name: 📏 Format check
        run: npm run format:check

      - name: 🧪 Run tests
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./apps/web/coverage
          flags: unittests
          name: codecov-umbrella

  # Build verification
  build:
    name: 🏗 Build Verification
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        environment: [development, production]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔧 Setup Turbo cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-build-${{ matrix.environment }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-build-${{ matrix.environment }}-
            ${{ runner.os }}-turbo-

      - name: 🏗 Build application
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            npm run build:prod
          else
            npm run build
          fi
        env:
          NODE_ENV: ${{ matrix.environment }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}

      - name: 📦 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: apps/web/.next
          key: ${{ runner.os }}-nextjs-${{ matrix.environment }}-${{ github.sha }}

  # Security scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🛡 SAST CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  # Deployment to staging (on develop branch)
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://bbwa-staging.netlify.app
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Netlify
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
        with:
          args: deploy --prod --dir=apps/web/.next

  # Deployment to production (on main branch)
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://baysidebuilderswa.com.au
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Netlify
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        with:
          args: deploy --prod --dir=apps/web/.next

      - name: 🔔 Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🚀 BBWA Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🚨 Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ BBWA Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}