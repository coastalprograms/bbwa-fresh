/**
 * Manual test script for Story 3.3 - White Card OCR Processing
 * Run this script to test the complete workflow
 */

import { createClient } from 'jsr:@supabase/supabase-js@2'\n\n// Configuration - Update these values for your environment\nconst SUPABASE_URL = 'your-supabase-url'\nconst SUPABASE_SERVICE_KEY = 'your-service-key'\n\nconst supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)\n\n// Test function to create a test certification and trigger processing\nasync function testWhiteCardProcessing() {\n  console.log('üß™ Starting White Card OCR Processing Test')\n  console.log('=====================================\\n')\n  \n  try {\n    // Step 1: Create a test worker\n    console.log('1. Creating test worker...')\n    const { data: worker, error: workerError } = await supabase\n      .from('workers')\n      .upsert({\n        email: 'test-worker@example.com',\n        full_name: 'Test Worker',\n        company: 'Test Company Ltd',\n        trade: 'Carpenter',\n        phone: '+61412345678'\n      }, { onConflict: 'email' })\n      .select()\n      .single()\n    \n    if (workerError) {\n      console.error('‚ùå Failed to create worker:', workerError)\n      return\n    }\n    \n    console.log('‚úÖ Worker created:', worker.full_name, `(${worker.id})`)\n    \n    // Step 2: Create test certification with white card path\n    console.log('\\n2. Creating test certification...')\n    const { data: cert, error: certError } = await supabase\n      .from('certifications')\n      .insert({\n        worker_id: worker.id,\n        type: 'White Card',\n        white_card_path: 'workers/test/sample-white-card.jpg',\n        status: 'Awaiting Review'\n      })\n      .select()\n      .single()\n    \n    if (certError) {\n      console.error('‚ùå Failed to create certification:', certError)\n      return\n    }\n    \n    console.log('‚úÖ Certification created:', cert.id)\n    \n    // Step 3: Wait for trigger to update status\n    console.log('\\n3. Waiting for database trigger...')\n    await new Promise(resolve => setTimeout(resolve, 2000))\n    \n    const { data: updatedCert } = await supabase\n      .from('certifications')\n      .select('status')\n      .eq('id', cert.id)\n      .single()\n    \n    if (updatedCert?.status === 'queued') {\n      console.log('‚úÖ Status updated to \"queued\" by trigger')\n    } else {\n      console.log('‚ö†Ô∏è Status not updated by trigger, current status:', updatedCert?.status)\n    }\n    \n    // Step 4: Manually trigger processing function\n    console.log('\\n4. Calling Edge Function for processing...')\n    const { data: processResult, error: processError } = await supabase.functions.invoke(\n      'process-white-card',\n      {\n        body: {\n          certification_id: cert.id,\n          worker_id: worker.id,\n          white_card_path: cert.white_card_path\n        }\n      }\n    )\n    \n    if (processError) {\n      console.error('‚ùå Edge Function error:', processError)\n    } else {\n      console.log('‚úÖ Edge Function response:', processResult)\n    }\n    \n    // Step 5: Check final certification status\n    console.log('\\n5. Checking final results...')\n    const { data: finalCert } = await supabase\n      .from('certifications')\n      .select('*')\n      .eq('id', cert.id)\n      .single()\n    \n    console.log('Final certification data:')\n    console.log('- Status:', finalCert?.status)\n    console.log('- Card Number:', finalCert?.card_number)\n    console.log('- Name on Card:', finalCert?.name_on_card)\n    console.log('- Expiry Date:', finalCert?.expiry_date)\n    console.log('- Processed At:', finalCert?.processed_at)\n    console.log('- Error (if any):', finalCert?.processing_error)\n    \n    // Step 6: Check audit logs\n    console.log('\\n6. Checking audit trail...')\n    const { data: audits } = await supabase\n      .from('certification_audits')\n      .select('event, detail, created_at')\n      .eq('certification_id', cert.id)\n      .order('created_at')\n    \n    if (audits && audits.length > 0) {\n      console.log('Audit trail:')\n      audits.forEach((audit, index) => {\n        console.log(`${index + 1}. ${audit.event} at ${audit.created_at}`)\n        if (audit.detail) {\n          console.log('   Details:', JSON.stringify(audit.detail, null, 2))\n        }\n      })\n    } else {\n      console.log('‚ö†Ô∏è No audit records found')\n    }\n    \n    console.log('\\nüéâ Test completed successfully!')\n    \n  } catch (error) {\n    console.error('‚ùå Test failed with error:', error)\n  }\n}\n\n// Test notification function separately\nasync function testNotification() {\n  console.log('\\nüìß Testing Notification Function')\n  console.log('=================================\\n')\n  \n  try {\n    const { data, error } = await supabase.functions.invoke('notify-builder', {\n      body: {\n        certification_id: 'test-cert-123',\n        worker_id: 'test-worker-123', \n        status: 'processed',\n        card_number: 'WC123456789',\n        expiry_date: '2026-03-15'\n      }\n    })\n    \n    if (error) {\n      console.error('‚ùå Notification error:', error)\n    } else {\n      console.log('‚úÖ Notification sent:', data)\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Notification test failed:', error)\n  }\n}\n\n// Run tests\nif (import.meta.main) {\n  console.log('‚ö†Ô∏è Update SUPABASE_URL and SUPABASE_SERVICE_KEY before running!')\n  console.log('Then uncomment the test functions below:\\n')\n  \n  // Uncomment these lines after updating configuration:\n  // await testWhiteCardProcessing()\n  // await testNotification()\n}\n\nexport { testWhiteCardProcessing, testNotification }\n"